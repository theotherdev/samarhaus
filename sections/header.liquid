{{ 'custom-header.css' | asset_url | stylesheet_tag }}
{{ 'component-icons.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign header_tag = 'div'
  if section.settings.sticky_header_type != 'none'
    assign header_tag = 'sticky-header'
  endif
-%}

<{{ header_tag }}
  class="shopify-section-header"
  id="shopify-section-header"
  data-sticky-type="{{ section.settings.sticky_header_type }}"
>
  <header class="header-custom" aria-label="{{ 'sections.header.title' | t }}">
    <div class="header-custom__logo">
      <a href="{{ routes.root_url }}" class="header__heading-link link link--text focus-inset">
        {%- if section.settings.logo != blank -%}
          {%- assign logo_alt = section.settings.logo.alt | default: shop.name | escape -%}
          {%- assign logo_height = section.settings.logo_width | divided_by: section.settings.logo.aspect_ratio -%}
          {{ section.settings.logo | image_url: width: section.settings.logo_width | image_tag:
            class: 'header__heading-logo',
            height: logo_height,
            width: section.settings.logo_width,
            alt: logo_alt
          }}
        {%- else -%}
          <span class="h2">{{ shop.name }}</span>
        {%- endif -%}
      </a>
    </div>

    <nav class="header-custom__nav">
      {%- if section.settings.menu != blank -%}
        <ul>
          {%- for link in section.settings.menu.links -%}
            <li>
              <a href="{{ link.url }}" class="header__menu-item list-menu__item link link--text focus-inset">
                {{ link.title }}
              </a>
            </li>
          {%- endfor -%}
        </ul>
      {%- endif -%}
    </nav>

    <div class="header-custom__icons">
      <a href="{{ routes.search_url }}" aria-label="{{ 'general.search.search' | t }}" class="header-custom__icon-link header-custom__search-icon-link">
        {% render 'icon-search' %}
        <span class="visually-hidden">{{ 'general.search.search' | t }}</span>
      </a>
      {%- if shop.customer_accounts_enabled -%}
        <a href="{%- if customer -%}{{ routes.account_url }}{%- else -%}{{ routes.account_login_url }}{%- endif -%}" class="header-custom__icon-link">
          LOGIN/REGISTER
        </a>
      {%- endif -%}
      <a href="{{ routes.cart_url }}" aria-label="{{ 'sections.header.cart' | t }}" class="header-custom__icon-link">
        ORDER
        {% comment %} Or use an icon: {% render 'icon-cart' %} {% endcomment %}
      </a>
    </div>
  </header>
</{{ header_tag }}>

{% javascript %}
  class StickyHeader extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.header = this; // The sticky-header element itself
      this.headerIsAlwaysSticky = this.getAttribute('data-sticky-type') === 'always';
      this.headerBounds = {};

      this.setHeaderHeight();

      window.matchMedia('(max-width: 990px)').addEventListener('change', this.setHeaderHeight.bind(this));

      if (this.headerIsAlwaysSticky) {
        this.header.classList.add('shopify-section-header-sticky');
      }

      this.currentScrollTop = 0;
      this.preventReveal = false;
      // Predictive search integration can be complex and might not be needed for aakam.kr replica.
      // this.predictiveSearch = this.querySelector('predictive-search');

      this.onScrollHandler = this.onScroll.bind(this);
      this.hideHeaderOnScrollUp = () => (this.preventReveal = true);

      this.addEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.addEventListener('scroll', this.onScrollHandler, false);

      this.createObserver();
    }

    setHeaderHeight() {
      document.documentElement.style.setProperty(
        '--header-height',
        `${this.header.offsetHeight}px`
      );
    }

    disconnectedCallback() {
      this.removeEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.removeEventListener('scroll', this.onScrollHandler);
    }

    createObserver() {
      let observer = new IntersectionObserver((entries, observer) => {
        this.headerBounds = entries[0].intersectionRect;
        observer.disconnect();
      });

      observer.observe(this.header);
    }

    onScroll() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      // if (this.predictiveSearch && this.predictiveSearch.isOpen) return;

      if (scrollTop > this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        this.header.classList.add('scrolled-past-header');
        if (this.preventHide) return;
        requestAnimationFrame(this.hide.bind(this));
      } else if (scrollTop < this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        this.header.classList.add('scrolled-past-header');
        if (!this.preventReveal) {
          requestAnimationFrame(this.reveal.bind(this));
        } else {
          window.clearTimeout(this.isScrolling);

          this.isScrolling = setTimeout(() => {
            this.preventReveal = false;
          }, 66);

          requestAnimationFrame(this.hide.bind(this));
        }
      } else if (scrollTop <= this.headerBounds.top) {
        this.header.classList.remove('scrolled-past-header');
        requestAnimationFrame(this.reset.bind(this));
      }

      this.currentScrollTop = scrollTop;
    }

    hide() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.add('shopify-section-header-hidden', 'shopify-section-header-sticky');
      this.closeMenuDisclosure();
      this.closeSearchModal();
    }

    reveal() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.add('shopify-section-header-sticky', 'animate');
      this.header.classList.remove('shopify-section-header-hidden');
    }

    reset() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.remove('shopify-section-header-hidden', 'shopify-section-header-sticky', 'animate');
    }

    closeMenuDisclosure() {
      // This specific implementation might need adjustment if menu disclosures are added later.
      // For now, it's kept from original Dawn theme.
      this.disclosures = this.disclosures || this.header.querySelectorAll('details-disclosure, header-menu');
      this.disclosures.forEach((disclosure) => disclosure.close && disclosure.close());
    }

    closeSearchModal() {
      // This specific implementation might need adjustment if a search modal is added later.
      // For now, it's kept from original Dawn theme.
      this.searchModal = this.searchModal || this.header.querySelector('details-modal');
      this.searchModal && this.searchModal.close && this.searchModal.close(false);
    }
  }

  customElements.define('sticky-header', StickyHeader);
{% endjavascript %}

{% schema %}
{
  "name": "Custom Header", // Changed name for clarity
  "class": "section-header-custom",
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "Logo image"
    },
    {
      "type": "range",
      "id": "logo_width",
      "min": 50,
      "max": 250,
      "step": 5,
      "unit": "px",
      "label": "Custom logo width",
      "default": 100
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "Menu"
    },
    {
      "type": "select",
      "id": "sticky_header_type",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "on-scroll-up", "label": "On scroll up" },
        { "value": "always", "label": "Always" }
      ],
      "default": "always",
      "label": "Sticky header type"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    }
  ]
}
{% endschema %}
